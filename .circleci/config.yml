version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

defaults: &nodeImage
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<<parameters.stack-name>>" --recursive
            aws cloudformation delete-stack --stack-name frontend-<<parameters.stack-name>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.stack-name>>
  
  install-aws:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_workflow-id:0:7}      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -k https://kvdb.io/UEQd2wZxHsQh6E9wUBQNxE/migration_<<parameters.workflow-id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test
      
                
  test-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
      # Your job code here
            
  scan-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter Name="tag:Name",Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: check inventory 
          command: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"   
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1

     

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["23:c7:77:8b:70:6a:15:2a:1d:bf:36:51:38:61:ea:6b"]
      - attach_workspace:
          at: ~/
      - run:
          name: check inventory content
          command: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies (ansible)
          command: apk add --update ansible
      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: "Run Playbook and configure server"
          command: ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
      

  run-migrations:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations > dump.txt
            cat dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/dump.txt   
            then
              curl -k https://kvdb.io/UEQd2wZxHsQh6E9wUBQNxE/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              fi
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations    
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations    
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: Install Ansible   
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            # sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # Copy backend to ansible files folder
            mkdir ./.circleci/ansible/roles/deploy/files/
            cp -r ./backend ./.circleci/ansible/roles/deploy/files

            # Run playbook
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations    
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations    
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - attach_workspace:
          at: ~/ 
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            aws cloudfront create-invalidation \
            --distribution-id kk1j287dhjp229031 \
            --paths "/*"

            curl -k https://kvdb.io/UEQd2wZxHsQh6E9wUBQNxE/udapeople_prev_workflow_id -d "${OldWorkflowID}"
      
      - destroy-environment:
          stack-name: "${CIRCLE_WORKFLOW_ID:0:7}"
     
      - revert-migrations    
      - slack/notify:
          channel: devops
          event: fail
          template: basic_fail_1  
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install-aws
        - install-nodejs
        - attach_workspace:
            at: ~/
        - run:
            name: Delete previous stacks and files
            command: |
              PreviousWorkflowID=$(curl -k https://kvdb.io/UEQd2wZxHsQh6E9wUBQNxE/udapeople_prev_workflow_id)
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
              
              echo "Previous Workflow ID: $PreviousWorkflowID"  
              echo "Current Workflow ID: $CurrentWorkflowID"  

              if [[ "$CurrentWorkflowID" != "$PreviousWorkflowID"  ]]
              then
                aws s3 rm "s3://udapeople-${PreviousWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "backend-${PreviousWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-${PreviousWorkflowID}"
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: Slack
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: Slack
      - run-migrations:
          requires: [configure-infrastructure]
          context: Slack
      - deploy-backend:
          requires: [run-migrations]
          context: Slack
      - deploy-frontend:
          requires: [deploy-backend]
          context: Slack
      - smoke-test:
          requires: [deploy-frontend]
          context: Slack
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]